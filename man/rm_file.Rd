% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/index.R
\name{rm_file}
\alias{rm_file}
\title{Remove files from the working tree and from the index}
\usage{
rm_file(repo = ".", path = NULL)
}
\arguments{
\item{repo}{a path to a repository or a \code{git_repository}
object. Default is '.'}

\item{path}{character vector with filenames to remove. The path
must be relative to the repository's working folder. Only
files known to Git are removed. Works different in case of
\code{data_repository}. See details.}
}
\value{
invisible(NULL)
}
\description{
Remove files from the working tree and from the index
}
\details{
In case of a \code{data_repository}, there are three options for \code{path}
\enumerate{
    \item{a vector of file names as used in \code{\link{write_delim_git}}}.
    This will remove all associated \code{.tsv} and \code{.yml} files
    \item{\code{".tsv"}} will remove ALL \code{.tsv} files.
    \item{\code{".yml"}} will remove all \code{.yml} files which have no
    associated \code{.tsv} file
}

\code{path = ".tsv"} is useful when updating a \code{data_repository} with a
variable number of files. First use \code{rm_file(repo, path = ".tsv")} to
remove all \code{.tsv} files. Then use \code{write_delim_git()} the store
all the data.frames. End by using \code{rm_file(repo, path = ".yml")}, which
will clean any left-over \code{.yml} files. As a result, any data.frame
which wasn't rewritten will be deleted.
}
\examples{
\dontrun{
## Initialize a repository
path <- tempfile(pattern="git2r-")
dir.create(path)
repo <- init(path)

## Create a user
config(repo, user.name="Alice", user.email="alice@example.org")

## Create a file
writeLines("Hello world!", file.path(path, "file-to-remove.txt"))

## Add file to repository
add(repo, "file-to-remove.txt")
commit(repo, "First commit message")

## Remove file
rm_file(repo, "file-to-remove.txt")

## View status of repository
status(repo)
}
}
